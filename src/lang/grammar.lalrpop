use std::str::FromStr;
use chrono::prelude::*;
use crate::{schedule::event::*, lang::ast::*};
use lalrpop_util::ParseError;

grammar;

U32: u32 = r"[0-9]+" => u32::from_str(<>).unwrap();

Time: NaiveTime = {
    <hour: U32> ":" <minute: U32> =>? NaiveTime::from_hms_opt(hour, minute, 0).ok_or(ParseError::User { error: "invalid time" }),
}

pub TimePair: TimePair = {
    <l: Time> "-" <h: Time> =>? Ok(TimePair(Time(l.min(h)), Time(l.max(h)))),
}

Placeholder: PlaceholderUnit = {
    "wd" => PlaceholderUnit::Weekday,
    "md" => PlaceholderUnit::Monthday,
    "mo" => PlaceholderUnit::Month,
    "y" => PlaceholderUnit::Year,
    "date" => PlaceholderUnit::Date,
}

Weekday: chrono::Weekday = {
    "sun" => chrono::Weekday::Sun,
    "mon" => chrono::Weekday::Mon,
    "tue" => chrono::Weekday::Tue,
    "wed" => chrono::Weekday::Wed,
    "thu" => chrono::Weekday::Thu,
    "fri" => chrono::Weekday::Fri,
    "sat" => chrono::Weekday::Sat,
}

Month: chrono::Month = {
    "jan" => chrono::Month::January,
    "feb" => chrono::Month::February,
    "mar" => chrono::Month::March,
    "apr" => chrono::Month::April,
    "may" => chrono::Month::May,
    "jun" => chrono::Month::June,
    "jul" => chrono::Month::July,
    "aug" => chrono::Month::August,
    "sep" => chrono::Month::September,
    "oct" => chrono::Month::October,
    "nov" => chrono::Month::November,
    "dec" => chrono::Month::December,
}

Date: chrono::NaiveDate = {
    <y: U32> "-" <m: U32> "-" <d: U32> =>? chrono::NaiveDate::from_ymd_opt(y as i32, m, d).ok_or(ParseError::User { error: "invalid date" }),
    <y: U32> "-" <m: Month> "-" <d: U32> =>? chrono::NaiveDate::from_ymd_opt(y as i32, m as u32, d).ok_or(ParseError::User { error: "invalid date" }),
}

pub Expression: Expression = {
    <l: Expression> "=" <r: Expression2> => Expression::Predicate(Box::new(Predicate::Equality(l, r))),
    <left: Expression> "<" <or_equal: "="?> <right: Expression2> => Expression::Predicate(Box::new(Predicate::Comparison { greater_than: false, or_equal: or_equal.is_some(), left, right })),
    <left: Expression> ">" <or_equal: "="?> <right: Expression2> => Expression::Predicate(Box::new(Predicate::Comparison { greater_than: true, or_equal: or_equal.is_some(), left, right })),
    <l: Expression> "|" <r: Expression2> => Expression::Predicate(Box::new(Predicate::Or(l, r))),
    <l: Expression> "+" <r: Expression2> => Expression::Arithmetic(Box::new(Arithmetic::Addition(l, r))),
    Expression2,
}

Expression2: Expression = {
    <l: Expression2> "&" <r: Expression3> => Expression::Predicate(Box::new(Predicate::And(l, r))),
    <l: Expression2> "%" <r: Expression3> => Expression::Arithmetic(Box::new(Arithmetic::Modulo(l, r))),
    Expression3,
}

Expression3: Expression = {
    "!" <Expression3> => Expression::Predicate(Box::new(Predicate::Not(<>))),
    Expression4
}

Expression4: Expression = {
    "md" "(" <Expression> ")" => Expression::Function(Box::new(Function::Monthday(<>))),
    "wd" "(" <Expression> ")" => Expression::Function(Box::new(Function::Weekday(<>))),
    "wdp" "(" <weekday: Expression> "," <date: Expression> ")" => Expression::Function(Box::new(Function::WeekdayPredecessor { weekday, date })),
    "nw" "(" <low: Expression> "," <high: Expression> ")" => Expression::Function(Box::new(Function::NumberOfWeeks { low, high })),
    Term,
}

Term: Expression = {
    U32 => Expression::Number(<>),
    Placeholder => Expression::Placeholder(<>),
    Weekday => Expression::Weekday(<>),
    Month => Expression::Month(<>),
    Date => Expression::Date(<>),
    "(" <Expression> ")",
}
